// Auto-generated API client from OpenAPI spec
// Do not edit this file manually

import { HttpClient } from './http-client';
import * as Types from './types';

export class ApiClient {
  private httpClient: HttpClient;
  private baseUrl: string;

  constructor(httpClient: HttpClient, baseUrl: string = 'https://api.example.com/v1') {
    this.httpClient = httpClient;
    this.baseUrl = baseUrl;
  }

  /**
   * Get all users
   * Retrieve a list of all users
   */
  async getUsers(
    params: {
      page?: number;
      limit?: number;
    },
    options?: import('axios').AxiosRequestConfig
  ): Promise<Types.GETUsersResponse> {
    const url = `${this.baseUrl}/users`
      .replace(/{([^}]+)}/g, (match, key) => {
        const value = params[key as keyof typeof params];
        return value !== undefined ? String(value) : match;
      });

    const queryParams = new URLSearchParams();
    if (params.page !== undefined) {
      queryParams.append('page', String(params.page));
    }
    if (params.limit !== undefined) {
      queryParams.append('limit', String(params.limit));
    }
    const finalUrl = queryParams.toString() ? `${url}?${queryParams}` : url;

    const response = await this.httpClient.get(
      finalUrl,
      {
        ...options
      }
    );

    return { data: response.data };
  }

  /**
   * Create a new user
   * Create a new user account
   */
  async createUser(
    data: Types.POSTUsersRequest,
    options?: import('axios').AxiosRequestConfig
  ): Promise<Types.POSTUsersResponse> {
    const url = `${this.baseUrl}/users`;

    const finalUrl = url;

    const response = await this.httpClient.post(
      finalUrl,
      data,
      {
        ...options
      }
    );

    return { data: response.data };
  }

  /**
   * Get user by ID
   * Retrieve a specific user by their ID
   */
  async getUserById(
    params: {
      id: string;
    },
    options?: import('axios').AxiosRequestConfig
  ): Promise<Types.GETUsersResponse> {
    const url = `${this.baseUrl}/users/{id}`
      .replace(/{([^}]+)}/g, (match, key) => {
        const value = params[key as keyof typeof params];
        return value !== undefined ? String(value) : match;
      });

    const finalUrl = url;

    const response = await this.httpClient.get(
      finalUrl,
      {
        ...options
      }
    );

    return { data: response.data };
  }

  /**
   * Update user
   * Update an existing user
   */
  async updateUser(
    params: {
      id: string;
    },
    data: Types.PUTUsersRequest,
    options?: import('axios').AxiosRequestConfig
  ): Promise<Types.PUTUsersResponse> {
    const url = `${this.baseUrl}/users/{id}`
      .replace(/{([^}]+)}/g, (match, key) => {
        const value = params[key as keyof typeof params];
        return value !== undefined ? String(value) : match;
      });

    const finalUrl = url;

    const response = await this.httpClient.put(
      finalUrl,
      data,
      {
        ...options
      }
    );

    return { data: response.data };
  }

  /**
   * Delete user
   * Delete a user account
   */
  async deleteUser(
    params: {
      id: string;
    },
    options?: import('axios').AxiosRequestConfig
  ): Promise<Types.DELETEUsersResponse> {
    const url = `${this.baseUrl}/users/{id}`
      .replace(/{([^}]+)}/g, (match, key) => {
        const value = params[key as keyof typeof params];
        return value !== undefined ? String(value) : match;
      });

    const finalUrl = url;

    const response = await this.httpClient.delete(
      finalUrl,
      {
        ...options
      }
    );

    return { data: response.data };
  }

}